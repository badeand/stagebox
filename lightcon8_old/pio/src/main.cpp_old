#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <WiFiUdp.h>
#include <OSCMessage.h>
#include <OSCBundle.h>
#include <OSCData.h>


// the number of the LED pin
const int ledPin = 2;  // 16 corresponds to GPIO16

const char* ssid     = "Bache";
const char* password = "71073826";

WebServer server(80);

// setting PWM properties
const int freq = 5000;
const int ledChannel = 0;
const int resolution = 8;

IPAddress ipAddress;

// for ArduinoOSC
WiFiUDP Udp;
const IPAddress outIp(10,40,10,105);        // remote IP (not needed for receive)
const unsigned int outPort = 9999;          // remote port (not needed for receive)
const unsigned int localPort = 8888;        // local port to listen for UDP packets (here's where we send the packets)

OSCErrorCode error;

void handleRoot() {
    server.send(200, "text/html", "{ ip: \""+ ipAddress.toString() + "\"}");
}

void handleIP() {
    server.send(200, "text/html", ipAddress.toString());
}


void setup(){

    Serial.begin(9600);


    // configure LED PWM functionalitites
    ledcSetup(ledChannel, freq, resolution);

    // attach the channel to the GPIO to be controlled
    ledcAttachPin(ledPin, ledChannel);


    // We start by connecting to a WiFi network

    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    ipAddress = WiFi.localIP();
    Serial.println(ipAddress);

    if (MDNS.begin("lightcon8_1")) {
        Serial.println("MDNS responder started");
    }

    server.on("/", handleRoot);
    server.on("/ip", handleIP);
    server.begin();
    Serial.println("HTTP server started");



}

void loop(){
    server.handleClient();

  /*  // increase the LED brightness
    for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){
        // changing the LED brightness with PWM
        ledcWrite(ledChannel, dutyCycle);
        delay(15);
    }

    // decrease the LED brightness
    for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){
        // changing the LED brightness with PWM
        ledcWrite(ledChannel, dutyCycle);
        delay(15);
    }*/
}


